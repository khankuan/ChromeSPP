/*
var onGetPorts = function(ports) {
  for (var i=0; i<ports.length; i++) {
    console.log(ports[i]);
  }
}
chrome.serial.getPorts(onGetPorts);
*/




chrome.bluetooth.getAdapterState(function(result){console.log(result);});

var firefly;
// discover devices 
chrome.bluetooth.getDevices({
    deviceCallback: function(device) {
        //onsole.log('deviceCallback:', device);
        // discover services
        //console.log(device);
        if (device.name == "FireFly-AF13"){
          firefly = device;
          //chrome.bluetooth.getServices({deviceAddress: device.address}, connectToDevice);
          //console.log(device);
          //chrome.bluetooth.getProfiles({device: device}, connectToDevice);
        }
    }
}, function() {
    //console.log('callback', arguments);
});

chrome.bluetooth.stopDiscovery();
chrome.bluetooth.startDiscovery({deviceCallback: function(d){
    console.log(d); 
    chrome.bluetooth.getProfiles({device: d}, connectToDevice);
  }
}, function(){
  if (chrome.runtime.lastError) {
    console.log('Error discovering. ',chrome.runtime.lastError);
    return;
  } else
    console.log("ok");
});



var connectToDevice = function(profiles) {

  //console.log('profiles: ', profiles);
  if (chrome.runtime.lastError) {
    console.log('Error connecting to device.',chrome.runtime.lastError);
    return;
  }

  chrome.bluetooth.addProfile(profiles[0], function(){
    //  if (chrome.runtime.lastError) {
      //console.error("Error on connection.", chrome.runtime.lastError.message);
    //}
    //console.log('Connecting to device: ', firefly);
    //console.log('Connecting to service: ', profiles[0]);


    chrome.bluetooth.onConnection.addListener(connectCallback);
    chrome.bluetooth.connect({device: firefly, profile: profiles[0]}, function(){
        if (chrome.runtime.lastError) {
          console.log(chrome.runtime.lastError.message);
          return;
        }
    });
 });
  
};



var s;
var connectCallback = function(socket) {
  s = socket;console.log(s);
  if (chrome.runtime.lastError) {
      console.error("Error on connection.", chrome.runtime.lastError.message);
    }
    //console.log('Connecting to device: ', firefly);
    intervalId = window.setInterval(runAtInterval(), 500);
};

var query = "";
function runAtInterval() {
  return function() {
    //var query = "getUuid?";
    var buffer = new ArrayBuffer(4*query.length);
    var message = new Uint8Array(buffer);

    for(var i = 0; i < query.length; i++)
      message[i] = query.charCodeAt(i);

    if (query.length > 0){
      chrome.bluetooth.write({socket:s, data:str2ab(query)},
          function(bytes) {
            if (chrome.runtime.lastError) {
              console.log('Write error: ' + chrome.runtime.lastError.message);
            } else {
              console.log('wrote ' + bytes + ' bytes');
            }
      });
      query = "";
    }
    if (chrome.runtime.lastError) {
      console.error("Error writing.", chrome.runtime.lastError.message);
    }

    chrome.bluetooth.read({socket:s}, function(arraybuffer){
    //var message = new Uint8Array(arraybuffer);
      console.log(ab2str(arraybuffer));
    });


  };
}

function send(s){
  query += s;
}


function ab2str(buf) {
  return String.fromCharCode.apply(null, new Uint8Array(buf));
}

function str2ab(str) {
  var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char
  var bufView = new Uint16Array(buf);
  for (var i=0, strLen=str.length; i<strLen; i++) {
    bufView[i] = str.charCodeAt(i);
  }
  return buf;
}
